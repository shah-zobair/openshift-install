---
# tasks file for Host Preparation


- name: Check disk for Docker
  block:
    - name: Get Docker Device Info
      set_fact:
        docker_device: "{{ hostvars[item]['container_runtime_docker_storage_setup_device'] }}"
      with_items: "{{ groups['new_nodes'] }}"

    - debug: msg="{{ docker_device }}"

    - name: Get Docker Disk Info
      set_fact:
        docker_disk: "{{ docker_device |replace(\"/dev/\",\"\") }}"

    - debug: msg="{{ docker_disk }}"

    - name: get Host device Info
      set_fact:
        device_name: "{{ item.key }}"
      with_dict: "{{ ansible_devices }}"
      changed_when: false

    - name: show all values for selected device name
      debug: var=ansible_devices["{{ docker_disk }}"]["partitions"]

    - name: Fail if Disk is not available
      fail:
      when: ansible_devices[docker_disk] is not defined

    - name: Fail if Disk is Partitioned
      fail:
      when: ansible_devices[docker_disk]["partitions"] | length != 0

    - name: get lvm name
      set_fact:
        device_name: "{{ item.key }}"
      with_dict: "{{ ansible_lvm }}"
      changed_when: false

    - name: show all values for selected pv name
      debug: var=ansible_lvm["pvs"]["{{ docker_device }}"]


    - name: Fail if "PVS" is configured
      fail:
      when: ansible_lvm["pvs"][docker_device] is defined


- name: Check FQDN and DNS forward/reverse resolve
  block:
    - name: Fail if FQDN is not configured
      fail:
      when: ansible_hostname == ansible_fqdn

    - name: Do dns lookup for fqdn
      shell: "nslookup {{ ansible_fqdn }} | grep -v 53 | grep Address: | awk {'print $2'}"
      register: dnslookup_ip
      changed_when: false

    - name: Fail if host IP and dns lookup IP are not the same
      fail:
      when: ansible_default_ipv4.address != dnslookup_ip.stdout

    - name: Do dns reverse lookup for local IP
      shell: "nslookup {{ ansible_default_ipv4.address }} | grep name | awk {' print $4'} | sed s/.$//g"
      register: dnslookup_fqdn
      changed_when: false

    - name: Fail if hostname and dns reverse lookup name are not the same
      fail:
      when: ansible_fqdn != dnslookup_fqdn.stdout

- name: Check /var/lib/origin partition exists
  command: mountpoint -q {{volume_var_lib_origin}}
  register: volume_stat
  failed_when: False
  changed_when: False

- name: Fail if /var/log/origin is not mounted
  fail:
  when: volume_stat.rc != 0

- name: Check /var/log size for 20GB or more
  command: mountpoint -q {{volume_var_log}}
  register: volume_stat
  failed_when: False
  changed_when: False

- name: Fail if /var/log is not mounted
  fail:
  when: volume_stat.rc != 0

- name: 'Ensure that total space on {{ volume_var_log }} is grater than 20GB'
  assert:
    that: item.size_total >= 20 * 1024 * 1024 * 1024
    msg: 'disk space has reached 70% thresold'
  when: item.mount == volume_var_log
  with_items: '{{ ansible_mounts }}'

- name: Host preparation
  block:
    - name: Set SELinux to Enforcing if not set already
      selinux:
        policy: targeted
        state: enforcing

    - name: Extend varloglv LV to 20GB
      lvol:
        vg: rootvg
        lv: varloglv
        size: 20g
        shrink: no

    - name: Set ipv4.ip_forward to 1
      shell: "sed -i 's/net.ipv4.ip_forward = 0/net.ipv4.ip_forward = 1/g' /etc/sysctl.conf; sysctl -p"
      register: sysctl
    - debug: var=sysctl.stdout_lines

    - name: Copy Artifactory Certificates
      synchronize:
        src: "{{ artifactory_cert_path }}"
        dest: /etc/pki/ca-trust/source/anchors/
        use_ssh_args: yes
    - name: Update CA Trust
      command: /usr/bin/update-ca-trust extract


- name: Mark that this playbook ran
  copy:
    dest: "/root/host-preparation.stat"
    content: |
      1
